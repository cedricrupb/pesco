#!/usr/bin/env python3
import os
import sys

lib_dir = os.path.join(os.path.dirname(__file__), "..", "lib", "python")

sys.dont_write_bytecode = True  # prevent creation of .pyc files
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "pesco")) # Add PeSCo also
sys.path.insert(0, lib_dir)

if "PYTHONPATH" not in os.environ:
    os.environ["PYTHONPATH"] = ""
os.environ["PYTHONPATH"] += os.pathsep + str(
    lib_dir
)  # necessary so subprocesses also use libraries

import json
import argparse
import traceback
import joblib
import numpy as np

from pathlib import Path

CURRENT_PATH = Path(__file__).parent.absolute()

from pesco.tester import klee
from pesco.cpachecker import generate_cpa_config
from pesco.utils  import execute

from pesco.data import clang_to_traversal, traversal_to_counts, counts_to_vector

def find_library(lib_path):
    current_path = str(CURRENT_PATH)
    while "pesco" in current_path:
        target_path = os.path.join(current_path, lib_path)
        if os.path.exists(target_path): return target_path
        current_path = os.path.dirname(current_path)

    raise ValueError("Cannot find lib %s in the current domain: %s" % (lib_path, CURRENT_PATH))


# Algorithm selection ---------------------------------------------------------

def extract_features_from_program(program_path):
    
    # Use clang for feature extraction
    try:
        clang_executable = find_library(os.path.join("lib", "clang", "clang"))
    except ValueError:
        clang_executable = None

    # Load vocabulary
    vocab_path = find_library(os.path.join("resource", "vocab.txt"))
    vocab = {}
    with open(vocab_path, "r") as lines:
        for i, line in enumerate(lines):
            vocab[line.strip()] = i

    # Parse file
    traversal = clang_to_traversal(program_path, 2, clang_executable = clang_executable)
    counts    = traversal_to_counts(traversal)
    vector    = counts_to_vector(counts, vocab)

    return np.array(vector)


def extract_features_from_klee(file_path):
    # Load vocabulary
    vocab_path = find_library(os.path.join("resource", "klee_vocab.txt"))
    vocab = {}
    with open(vocab_path, "r") as lines:
        for i, line in enumerate(lines):
            vocab[line.strip()] = i

    features = [0] * len(vocab)
    with open(file_path, "r") as lines:
        for line in lines:
            if not line.startswith("KLEE: done:"): continue
            line = line[11:].strip()
            feature_name, count = line.split(" = ")
            
            if feature_name in vocab:
                feature_index = vocab[feature_name]
                features[feature_index] = int(count)

    return np.array(features)


def load_selector(selector_path):
    return joblib.load(selector_path)


def save_prediction(selector, scores, file_path, features = None):
    output = {}
    for i, score in enumerate(scores):
        try:
            p = selector._tools[i]
        except KeyError:
            p = i
        p = selector._prediction_to_label(p)
        output[p] = score

    if features is not None:
        output["features"] = features.tolist()
    
    with open(file_path, "w") as o:
        json.dump(output, o, indent = 4)


def map_prediction(selector, mapping, scores):
    results = {}
    for i, score in enumerate(scores):
        try:
            p = selector._tools[i]
        except KeyError:
            p = i
        p = selector._prediction_to_label(p)
        results[p] = score
    
    for key, value in mapping.items():
        if value == "passthrough": results[key] = 9000
    
    selection = min(results.items(), key = lambda x: x[1])[0]
    assert selection in mapping

    return mapping[selection]


def map_selection_to_config(selection):
    try:
        return generate_cpa_config(selection)
    except Exception as e:
        print("Unknown selection: %s" % str(selection))
        raise e


def select_config(program_path, klee_result = None, predict = None):
    
    # Extract features
    features = extract_features_from_program(program_path)
    print(f"Extracted {features.shape[0]} features...")

    try:
        if klee_result is None: raise ValueError()
        klee_output = os.path.join("test-suite", "info")
        dynamic_features = extract_features_from_klee(klee_output)
        dynamic_features = np.floor(np.log10(1 + dynamic_features))
        features = np.concatenate([features, dynamic_features])
        print("Successfully extracted dynamic KLEE features.")
    except (ValueError, FileNotFoundError):
        dynamic_features = None

    features = np.expand_dims(features, axis = 0)

    selector_path = None

    # Load selector
    if dynamic_features is not None:

        if "Result: false(unreach-call)" in klee_result.output:
            try:
                selector_path = find_library(os.path.join("resource", "klee_selector_fail.jbl"))
            except ValueError:
                selector_path = None

        if selector_path is None and klee_result.status == "done" and "ctrl-c" not in klee_result.output:
            try:
                selector_path = find_library(os.path.join("resource", "klee_selector_done.jbl"))
            except ValueError:
                selector_path = None
        
        if selector_path is None:
            selector_path = find_library(os.path.join("resource", "klee_selector.jbl"))
        
        selector = load_selector(selector_path)

        #try:
        #    ensemble_path = find_library(os.path.join("resource", "klee_base_selector.jbl"))
        #    ensemble_model = load_selector(ensemble_path)
        #    selector = EnsembleModel([selector, ensemble_model])
        #except ValueError:
        #    pass
        
    else:
        selector_path = find_library(os.path.join("resource", "base_selector.jbl"))
        selector = load_selector(selector_path)

    selection, confidence, scores = selector.predict(features, return_confidence = True, return_scores = True)
    selection, confidence, scores = selection[0], confidence[0], scores[0]

    try:
        mapping_path = find_library(os.path.join("resource", "mapping.json"))
        with open(mapping_path, "r") as i:
            mapping = json.load(i)
        selection = map_prediction(selector, mapping, scores)
    except AssertionError:
        print(f"PESCO ERROR Mapping of {selection} is not supported.")
    except ValueError:
        pass

    if predict is not None:
        save_prediction(selector, scores, predict, features = features[0])
    
    print(f"Selected config: {selection} (confidence: {(confidence * 100):.2f}%)")
    return map_selection_to_config(selection)


# CPAchecker -------------------------------------------------------------------

def run_cpachecker(program_path, spec = "", data_model = "LP64", timeout = None, memory = None, config = "svcomp21-pesco"):
    print("Execute CPAchecker with config \"%s\"." % config)

    executable = find_library("lib/cpachecker/scripts/cpa.sh")

    if memory:
        memory = "%dM" % max(100, int(memory) // 1024 // 1024)
    else:
        memory = "1000M"

    if config is None:
        config = "-svcomp21-pesco"

    if config.endswith(".properties") and os.path.exists(config):
        config = f"-config {config}"
    elif not config.startswith("-"):
        config = f"-{config}"
    
    cpa_result = execute([
        executable, config,
        "-heap", memory,
        "-benchmark",
        "-timelimit", str(timeout)+"s",
        "-spec", spec,
        "-64" if data_model == "LP64" else "-32",
        program_path
    ])

    error = cpa_result.err_output.decode("utf-8")

    if "Invalid option -" in error:
        return run_cpachecker(program_path, spec, data_model, timeout, config = "svcomp23")

    print(error)
    print(cpa_result.output)


# Main function ----------------------------------------------------------------

def run_pesco(program_path, spec = "", data_model = "LP64", timeout = None, memory = None, predict = None):

    klee_result = klee(
        program_path  = program_path,
        property_file = spec,
        data_model    = data_model,
        cputime       = 60, 
        memory        = memory,
        witness       = True
    )

    if klee_result.status == "false": 
        print("Verification result: FALSE. Property violation (unreach-call: reach_error();) found by chosen configuration.")
        return True
    
    if predict:
        select_config(program_path, klee_result = klee_result, predict = predict)
        return True

    config = select_config(program_path, klee_result = klee_result)

    # Run CPAchecker with PESCO config afterwards
    return run_cpachecker(
        program_path = program_path,
        spec = spec,
        data_model = data_model,
        timeout = timeout,
        memory  = memory,
        config  = config
    )


def cpachecker_version():
    executable = find_library("lib/cpachecker/scripts/cpa.sh")

    cpa_result = execute([
        executable, "-version"
    ])
    
    for line in cpa_result.output.splitlines():
        if line.strip().startswith("CPAchecker"):
            return line

    return "CPAchecker (unknown version)"


def print_version():
    cpa_version = cpachecker_version()
    print("PeSCo 2.0 [%s]"  % cpa_version)


def _main(argv = None):
    argv = argv or sys.argv

    if len(argv) > 1 and "--version" in argv:
        print_version()
        return

    parser = argparse.ArgumentParser()
    parser.add_argument("program_path")
    parser.add_argument("--data_model", type = str, default = "LP64")
    parser.add_argument("--timelimit", type = int, default = 900)
    parser.add_argument("--memory", type = str, default = None)
    parser.add_argument("--spec", type = str, default = "")
    parser.add_argument("--predict", type = str, default = None)
    args = parser.parse_args(args = argv[1:])

    if not args.spec:
        args.spec = find_library(os.path.join("properties", "sv-comp-reachability.prp"))

    if args.memory:
        args.memory = parse_memory(args.memory)
    
    spec = parse_specification(args.spec)

    if not os.path.exists("output"):
        os.makedirs("output")

    if spec == "REACH":
        run_pesco(
            program_path = args.program_path,
            spec = args.spec,
            data_model = args.data_model,
            timeout = args.timelimit,
            memory  = args.memory,
            predict = args.predict,
        )
    else:
        run_cpachecker(
            program_path = args.program_path,
            spec = args.spec,
            data_model = args.data_model,
            timeout = args.timelimit,
            memory  = args.memory,
            config = "svcomp23"
        )


def main(argv = None):
    try:
        _main(argv)
    except KeyboardInterrupt:
        print("CTRL-C detected. Abort.", flush = True)
    finally:
        print("Finished.", flush = True)

# Helper ----------------------------------------------------------------


def parse_specification(spec_path):
    if not os.path.exists(spec_path):
        print("Cannot find specification %s. Assume reachability specification" % spec_path)
        return "REACH"

    with open(spec_path, "r") as f:
        spec = f.read()

    if spec.strip() == "CHECK( init(main()), LTL(G ! call(reach_error())) )":
        return "REACH"

    return "OTHER"


def parse_memory(memory):
    factor = 1
    if memory.endswith("K"): factor = 1024
    if memory.endswith("M"): factor = 1024 ** 2
    if memory.endswith("G"): factor = 1024 ** 3

    if factor != 1: memory = memory[:-1]

    try:
        return factor * int(memory)
    except Exception:
        print("Cannot parse %s. Use 100M instead." % memory)
        return 100 * (1024 ** 2)


if __name__ == "__main__":
    main()