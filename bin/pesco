#!/usr/bin/env python3
import argparse
import os
import sys
from glob import glob

from utils import execute

from pathlib import Path

CURRENT_PATH = Path(__file__).parent.absolute()

# KLEE ----------------------------------------------------------------

def find_test_case():
    if not os.path.exists("test-suite"): return None

    xml_files = [f for f in glob("test-suite/*.xml") if not f.endswith("metadata.xml")]
    if len(xml_files) > 1:
        print("Multiple test cases! Which should I pick?")
        return None

    return xml_files[0] if len(xml_files) > 0 else None


def run_klee(program_path, spec = "", data_model = "LP64", timeout = None):
    executable = find_library("ctesters/ctesters.py")

    result = execute([
        "python3", executable, "klee", program_path,
        "--data_model", data_model,
        "--cputime", str(timeout),
        "--property_file", spec,
    ])

    test_case = find_test_case()
    
    if "false(unreach-call)" not in result.output or test_case is None:
        print(result.err_output.decode("utf-8"))
        print(result.output)
        # Abort?
        print("Abort.")
        return False
    
    executable = find_library("test2witness/test2witness.py")
    output_path = os.path.join("output", "witness.graphml")

    output_dir = os.path.dirname(output_path)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    t2w_result = execute([
        "python3", executable, program_path, test_case,
        "--machine_model", "m64" if data_model == "LP64" else "m32",
        "--spec", spec,
        "--producer", "PeSCo",
        "--output", output_path,
    ])
    
    if "Success." not in t2w_result.output:
        print(t2w_result.output)
        print(t2w_result.err_output.decode("utf-8"))
        return False

    return True


# CPAchecker -------------------------------------------------------------------

def run_cpachecker(program_path, spec = "", data_model = "LP64", timeout = None):
    executable = find_library("cpachecker/scripts/cpa.sh")

    cpa_result = execute([
        executable, "-svcomp21-pesco",
        "-heap", "1000M",
        "-benchmark",
        "-timelimit", str(timeout)+"s",
        "-spec", spec,
        "-64" if data_model == "LP64" else "-32",
        program_path
    ])

    print(cpa_result.err_output.decode("utf-8"))
    print(cpa_result.output)


# Main function ----------------------------------------------------------------

def run_pesco(program_path, spec = "", data_model = "LP64", timeout = None):
    
    # Run KLEE for 60 seconds
    klee_successfull = run_klee(
        program_path = program_path,
        spec = spec,
        data_model = data_model,
        timeout = 60
    )

    if klee_successfull: return True

    # Run CPAchecker with PESCO config afterwards
    return run_cpachecker(
        program_path = program_path,
        spec = spec,
        data_model = data_model,
        timeout = timeout
    )


def cpachecker_version():
    executable = find_library("cpachecker/scripts/cpa.sh")

    cpa_result = execute([
        executable, "-version"
    ])
    
    for line in cpa_result.output.splitlines():
        if line.strip().startswith("CPAchecker"):
            return line

    return "CPAchecker (unknown version)"


def print_version():
    cpa_version = cpachecker_version()
    print("PeSCo 2.0 [%s]"  % cpa_version)


def main(argv = None):
    argv = argv or sys.argv

    if len(argv) > 1 and "--version" in argv:
        print_version()
        return

    parser = argparse.ArgumentParser()
    parser.add_argument("program_path")
    parser.add_argument("--data_model", type = str, default = "LP64")
    parser.add_argument("--timeout", type = int, default = 900)
    parser.add_argument("--spec", type = str, default = "")
    args = parser.parse_args(args = argv[1:])

    if args.spec:
        spec = parse_specification(args.spec)
    else:
        spec = "REACH"

    if spec == "REACH":
        run_pesco(
            program_path = args.program_path,
            spec = args.spec,
            data_model = args.data_model,
            timeout = args.timeout
        )
    else:
        run_cpachecker(
            program_path = args.program_path,
            spec = args.spec,
            data_model = args.data_model,
            timeout = args.timeout
        )


# Helper ----------------------------------------------------------------


def parse_specification(spec_path):
    if not os.path.exists(spec_path):
        print("Cannot find specification %s. Assume reachability specification" % spec_path)
        return "REACH"

    with open(spec_path, "r") as f:
        spec = f.read()

    if spec.strip() == "CHECK( init(main()), LTL(G ! call(reach_error())) )":
        return "REACH"

    return "OTHER"


def find_library(lib_path):
    current_path = str(CURRENT_PATH)
    while "pesco" in current_path:
        target_path = os.path.join(current_path, lib_path)
        if os.path.exists(target_path): return target_path
        current_path = os.path.dirname(current_path)

    raise ValueError("Cannot find lib %s in the current domain: %s" % (lib_path, CURRENT_PATH))
    


if __name__ == "__main__":
    main()